/*
 * This file is part of the TYPO3 CMS project.
 *
 * It is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, either version 2
 * of the License, or any later version.
 *
 * For the full copyright and license information, please read the
 * LICENSE.txt file that was distributed with this source code.
 *
 * The TYPO3 project - inspiring people to share!
 */
define(["TYPO3/CMS/Backend/Notification","TYPO3/CMS/Core/DocumentService","TYPO3/CMS/Core/Event/RegularEvent"],(function(e,t,c){"use strict";var o,n,i,a,s;!function(e){e.actionsSelector=".t3js-multi-record-selection-actions",e.checkboxSelector=".t3js-multi-record-selection-check",e.checkboxActionsSelector="#multi-record-selection-check-actions"}(o||(o={})),function(e){e.actionButton="button[data-multi-record-selection-action]",e.checkboxActionButton="button[data-multi-record-selection-check-action]",e.checkboxActionsToggleButton='button[data-bs-target="multi-record-selection-check-actions"]'}(n||(n={})),function(e){e.edit="edit"}(i||(i={})),function(e){e.checkAll="check-all",e.checkNone="check-none",e.toggle="toggle"}(a||(a={})),function(e){e.any="",e.checked=":checked",e.unchecked=":not(:checked)"}(s||(s={}));class l{static getCheckboxes(e=s.any){return document.querySelectorAll(o.checkboxSelector+e)}static changeCheckboxState(e,t){e.checked===t||e.dataset.manuallyChanged||(e.checked=t,e.dispatchEvent(new Event("checkbox:state:changed",{bubbles:!0,cancelable:!1})))}static getReturnUrl(e){return""===e&&(e=top.list_frame.document.location.pathname+top.list_frame.document.location.search),encodeURIComponent(e)}static restoreTemporaryState(){const e=l.getCheckboxes(s.checked);if(!e.length)return;e.forEach(e=>{e.closest("tr").classList.add("success")});const t=document.querySelectorAll(o.actionsSelector);t.length&&t.forEach(e=>e.classList.remove("hidden"))}static toggleActionsState(){const e=document.querySelectorAll(o.actionsSelector);if(!e.length)return;if(!l.getCheckboxes(s.checked).length)return void e.forEach(e=>e.classList.add("hidden"));e.forEach(e=>e.classList.remove("hidden"));const t=document.querySelectorAll([o.actionsSelector,n.actionButton].join(" "));t.length&&t.forEach(e=>{if(!e.dataset.multiRecordSelectionActionConfig)return;const t=JSON.parse(e.dataset.multiRecordSelectionActionConfig);if(!t.idField)return;e.classList.add("disabled");const c=l.getCheckboxes(s.checked);for(let o=0;o<c.length;o++)if(c[o].closest("tr").dataset[t.idField]){e.classList.remove("disabled");break}})}static unsetManuallyChangedAttribute(){l.getCheckboxes().forEach(e=>{e.removeAttribute("data-manually-changed")})}constructor(){t.ready().then(()=>{l.restoreTemporaryState(),this.registerActions(),this.registerActionsEventHandlers(),this.registerCheckboxActions(),this.registerToggleCheckboxActions(),this.registerDispatchCheckboxStateChangedEvent(),this.registerCheckboxStateChangedEventHandler()})}registerActions(){new c("click",(t,c)=>{const o=l.getCheckboxes(s.checked);if(c.dataset.multiRecordSelectionAction&&o.length)switch(c.dataset.multiRecordSelectionAction){case i.edit:t.preventDefault();const n=JSON.parse(c.dataset.multiRecordSelectionActionConfig||"");if(!n||!n.idField||!n.table)break;const a=[];o.forEach(e=>{const t=e.closest("tr");null!==t&&t.dataset[n.idField]&&a.push(t.dataset[n.idField])}),a.length?window.location.href=top.TYPO3.settings.FormEngine.moduleUrl+"&edit["+n.table+"]["+a.join(",")+"]=edit&returnUrl="+l.getReturnUrl(n.returnUrl||""):e.warning("The selected elements can not be edited.");break;default:c.dispatchEvent(new Event("multiRecordSelection:action:"+c.dataset.multiRecordSelectionAction,{bubbles:!0,cancelable:!1}))}}).delegateTo(document,[o.actionsSelector,n.actionButton].join(" ")),l.toggleActionsState()}registerActionsEventHandlers(){new c("multiRecordSelection:actions:show",()=>{const e=document.querySelectorAll(o.actionsSelector);e&&e.forEach(e=>e.classList.remove("hidden"))}).bindTo(document),new c("multiRecordSelection:actions:hide",()=>{const e=document.querySelectorAll(o.actionsSelector);e&&e.forEach(e=>e.classList.add("hidden"))}).bindTo(document)}registerCheckboxActions(){new c("click",(t,c)=>{t.preventDefault();const o=l.getCheckboxes();if(c.dataset.multiRecordSelectionCheckAction&&o.length){switch(l.unsetManuallyChangedAttribute(),c.dataset.multiRecordSelectionCheckAction){case a.checkAll:o.forEach(e=>{l.changeCheckboxState(e,!0)});break;case a.checkNone:o.forEach(e=>{l.changeCheckboxState(e,!1)});break;case a.toggle:o.forEach(e=>{l.changeCheckboxState(e,!e.checked)});break;default:e.warning("Unknown checkbox action")}l.unsetManuallyChangedAttribute()}}).delegateTo(document,[o.checkboxActionsSelector,n.checkboxActionButton].join(" "))}registerDispatchCheckboxStateChangedEvent(){new c("change",(e,t)=>{t.dispatchEvent(new Event("checkbox:state:changed",{bubbles:!0,cancelable:!1}))}).delegateTo(document,o.checkboxSelector)}registerCheckboxStateChangedEventHandler(){new c("checkbox:state:changed",e=>{const t=e.target;t.checked?t.closest("tr").classList.add("success"):t.closest("tr").classList.remove("success"),l.toggleActionsState()}).bindTo(document)}registerToggleCheckboxActions(){new c("click",()=>{const e=document.querySelector('button[data-multi-record-selection-check-action="'+a.checkAll+'"]');null!==e&&e.classList.toggle("disabled",!l.getCheckboxes(s.unchecked).length);const t=document.querySelector('button[data-multi-record-selection-check-action="'+a.checkNone+'"]');null!==t&&t.classList.toggle("disabled",!l.getCheckboxes(s.checked).length)}).delegateTo(document,n.checkboxActionsToggleButton)}}return new l}));