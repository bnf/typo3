import{parser}from"@lezer/php";import{parseMixed}from"@lezer/common";import{html}from"@codemirror/lang-html";import{LRLanguage,indentNodeProp,continuedIndent,delimitedIndent,foldNodeProp,foldInside,LanguageSupport}from"@codemirror/language";import{styleTags,tags}from"@codemirror/highlight";const phpLanguage=LRLanguage.define({parser:parser.configure({props:[indentNodeProp.add({IfStatement:continuedIndent({except:/^\s*({|else\b|elseif\b|endif\b)/}),TryStatement:continuedIndent({except:/^\s*({|catch\b|finally\b)/}),SwitchBody:e=>{let t=e.textAfter,a=/^\s*\}/.test(t),n=/^\s*(case|default)\b/.test(t);return e.baseIndent+(a?0:n?1:2)*e.unit},ColonBlock:e=>e.baseIndent+e.unit,"Block EnumBody DeclarationList":delimitedIndent({closing:"}"}),ArrowFunction:e=>e.baseIndent+e.unit,"String BlockComment":()=>-1,Statement:continuedIndent({except:/^({|end(for|foreach|switch|while)\b)/})}),foldNodeProp.add({"Block EnumBody DeclarationList SwitchBody ArrayExpression ValueList":foldInside,ColonBlock:e=>({from:e.from+1,to:e.to}),BlockComment:e=>({from:e.from+2,to:e.to-2})}),styleTags({"Visibility abstract final static":tags.modifier,"for foreach while do if else elseif switch try catch finally return throw break continue default case":tags.controlKeyword,"endif endfor endforeach endswitch endwhile goto match":tags.controlKeyword,"and or xor yield unset clone instanceof insteadof":tags.operatorKeyword,"function fn class trait implements extends const enum global namespace trait use var":tags.definitionKeyword,"include include_once require require_once declare enddeclare":tags.definitionKeyword,"new from echo print array list as":tags.keyword,null:tags.null,Boolean:tags.bool,VariableName:tags.variableName,"NamespaceName/...":tags.namespace,"NamedType/...":tags.typeName,Name:tags.name,"CallExpression/Name":tags.function(tags.variableName),"LabelStatement/Name":tags.labelName,"MemberExpression/Name MemberExpression/VariableName":tags.propertyName,"CallExpression/MemberExpression/Name":tags.function(tags.propertyName),"FunctionDefinition/Name":tags.function(tags.definition(tags.variableName)),"ClassDeclaration/Name":tags.definition(tags.className),UpdateOp:tags.updateOperator,ArithOp:tags.arithmeticOperator,LogicOp:tags.logicOperator,BitOp:tags.bitwiseOperator,CompareOp:tags.compareOperator,ControlOp:tags.controlOperator,AssignOp:tags.definitionOperator,"$ ConcatOp":tags.operator,LineComment:tags.lineComment,BlockComment:tags.blockComment,Integer:tags.integer,Float:tags.float,String:tags.string,ShellExpression:tags.special(tags.string),"=> ->":tags.punctuation,"( )":tags.paren,"#[ [ ]":tags.squareBracket,"${ { }":tags.brace,"-> ?->":tags.derefOperator,", ; :: : \\":tags.separator,"PhpOpen PhpClose":tags.processingInstruction})]}),languageData:{commentTokens:{block:{open:"/*",close:"*/"},line:"//"},indentOnInput:/^\s*(?:case |default:|end(?:if|for(?:each)?|switch|while)|else(?:if)?|\{|\})$/,wordChars:"$"}});function php(e={}){let t,a=[];if(null===e.baseLanguage);else if(e.baseLanguage)t=e.baseLanguage;else{let e=html({matchClosingTags:!1});a.push(e.support),t=e.language}return new LanguageSupport(phpLanguage.configure({wrap:t&&parseMixed(e=>e.type.isTop?{parser:t.parser,overlay:e=>"Text"==e.name}:null),top:e.plain?"Program":"Template"}),a)}export{php,phpLanguage};