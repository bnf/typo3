/*
 * This file is part of the TYPO3 CMS project.
 *
 * It is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, either version 2
 * of the License, or any later version.
 *
 * For the full copyright and license information, please read the
 * LICENSE.txt file that was distributed with this source code.
 *
 * The TYPO3 project - inspiring people to share!
 */
define(["jquery","TYPO3/CMS/Backend/DocumentSaveActions","TYPO3/CMS/Backend/Modal","TYPO3/CMS/Backend/Utility/MessageUtility","tablesort"],(function(e,a,t,l){"use strict";class s{constructor(){this.allCheckedStatus=!1,this.actOnChangedTaskClass=a=>{let t=a.val();t=t.toLowerCase().replace(/\\/g,"-"),e(".extraFields").hide(),e(".extra_fields_"+t).show()},this.actOnChangedTaskType=a=>{this.toggleFieldsByTaskType(e(a.currentTarget).val())},this.actOnChangeSchedulerTableGarbageCollectionAllTables=a=>{let t=e("#task_tableGarbageCollection_numberOfDays"),l=e("#task_tableGarbageCollection_table");if(a.prop("checked"))l.prop("disabled",!0),t.prop("disabled",!0);else{let e=parseInt(t.val(),10);if(e<1){let a=l.val();void 0!==defaultNumberOfDays[a]&&(e=defaultNumberOfDays[a])}l.prop("disabled",!1),e>0&&t.prop("disabled",!1)}},this.actOnChangeSchedulerTableGarbageCollectionTable=a=>{let t=e("#task_tableGarbageCollection_numberOfDays");defaultNumberOfDays[a.val()]>0?(t.prop("disabled",!1),t.val(defaultNumberOfDays[a.val()])):(t.prop("disabled",!0),t.val(0))},this.checkOrUncheckAllCheckboxes=e=>(e.parents(".tx_scheduler_mod1_table").find(":checkbox").prop("checked",!this.allCheckedStatus),this.allCheckedStatus=!this.allCheckedStatus,!1),this.toggleFieldsByTaskType=a=>{a=parseInt(a+"",10),e("#task_end_col").toggle(2===a),e("#task_frequency_row").toggle(2===a)},this.toggleTaskGroups=a=>{let t=a.data("task-group-id");e("#recordlist-task-group-"+t).collapse("toggle")},this.initializeEvents=()=>{e(".checkall").on("click",a=>{this.checkOrUncheckAllCheckboxes(e(a.currentTarget))}),e("#task_class").on("change",a=>{this.actOnChangedTaskClass(e(a.currentTarget))}),e("#task_type").on("change",this.actOnChangedTaskType),e("#task_tableGarbageCollection_allTables").on("change",a=>{this.actOnChangeSchedulerTableGarbageCollectionAllTables(e(a.currentTarget))}),e("#task_tableGarbageCollection_table").on("change",a=>{this.actOnChangeSchedulerTableGarbageCollectionTable(e(a.currentTarget))}),e("[data-update-task-frequency]").on("change",a=>{const t=e(a.currentTarget);e("#task_frequency").val(t.val()),t.val(t.attr("value")).trigger("blur")});const a=document.querySelector("table.taskGroup-table");null!==a&&new Tablesort(a),e(document).on("click",".t3js-element-browser",e=>{e.preventDefault();const a=e.currentTarget;t.advanced({type:t.types.iframe,content:a.href+"&mode="+a.dataset.mode+"&bparams="+a.dataset.params,size:t.sizes.large})}),window.addEventListener("message",this.listenOnElementBrowser)},this.initializeDefaultStates=()=>{let a=e("#task_type");a.length&&this.toggleFieldsByTaskType(a.val());let t=e("#task_class");t.length&&(this.actOnChangedTaskClass(t),s.updateElementBrowserTriggers())},this.listenOnElementBrowser=e=>{if(!l.MessageUtility.verifyOrigin(e.origin))throw"Denied message sent by "+e.origin;if("typo3:elementBrowser:elementAdded"===e.data.actionName){if(void 0===e.data.fieldName)throw"fieldName not defined in message";if(void 0===e.data.value)throw"value not defined in message";const a=e.data.value.split("_");document.querySelector('input[name="'+e.data.fieldName+'"]').value=a[1]}},this.initializeEvents(),this.initializeDefaultStates(),a.getInstance().addPreSubmitCallback(()=>{let a=e("#task_class").val();a=a.toLowerCase().replace(/\\/g,"-"),e(".extraFields").appendTo(e("#extraFieldsHidden")),e(".extra_fields_"+a).appendTo(e("#extraFieldsSection"))})}static updateElementBrowserTriggers(){document.querySelectorAll(".t3js-element-browser").forEach(e=>{const a=document.getElementById(e.dataset.triggerFor);e.dataset.params=a.name+"|||pages"})}}return new s}));